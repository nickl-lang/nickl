extern "c" $printf

type Vec2 :{[2]f64}

local proc make_vec2(:f64 %x, :f64 %y) :Vec2 %vec {
    store %x -> %vec
    add 8, %vec -> %y_addr
    store %y -> %y_addr
    ret
}

local data x :i64

pub proc foo(:f64 %x, :f64 %y) :f64 {

    // TODO: Fix f32 constants

@start
    nop

    comment "=========== control flow ==========="
    jmp      @label
    jmpz  1, @label
    jmpnz 1, @label
    jmpz  1.0, @label
    jmpnz 1.0, @label
    jmpz  :f32 1.0, @label
    jmpnz :f32 1.0, @label

    jmp @label
@label

    comment "=============== copy ==============="
    mov :i8  1 -> :i8  %_0
    mov :i16 1 -> :i16 %_1
    mov :i32 1 -> :i32 %_2
    mov :i64 1 -> :i64 %_3

    mov :u8  1 -> :u8  %_4
    mov :u16 1 -> :u16 %_5
    mov :u32 1 -> :u32 %_6
    mov :u64 1 -> :u64 %_7

    mov :i8  1 -> :u8  %_8
    mov :i16 1 -> :u16 %_9
    mov :i32 1 -> :u32 %_10
    mov :i64 1 -> :u64 %_11

    mov :u8  1 -> :i8  %_12
    mov :u16 1 -> :i16 %_13
    mov :u32 1 -> :i32 %_14
    mov :u64 1 -> :i64 %_15

    mov :f32 1 -> :f32 %_16
    mov :f64 1 -> :f64 %_17

    comment "=========== sign extend ============"
    mov :i8  1 -> :i16 %_18
    mov :i8  1 -> :i32 %_19
    mov :i8  1 -> :i64 %_20
    mov :i16 1 -> :i32 %_21
    mov :i16 1 -> :i64 %_22
    mov :i32 1 -> :i64 %_23

    mov :i8  1 -> :u16 %_24
    mov :i8  1 -> :u32 %_25
    mov :i8  1 -> :u64 %_26
    mov :i16 1 -> :u32 %_27
    mov :i16 1 -> :u64 %_28
    mov :i32 1 -> :u64 %_29

    comment "=========== zero extend ============"
    mov :u8  1 -> :u16 %_30
    mov :u8  1 -> :u32 %_31
    mov :u8  1 -> :u64 %_32
    mov :u16 1 -> :u32 %_33
    mov :u16 1 -> :u64 %_34
    mov :u32 1 -> :u64 %_35

    mov :u8  1 -> :i16 %_36
    mov :u8  1 -> :i32 %_37
    mov :u8  1 -> :i64 %_38
    mov :u16 1 -> :i32 %_39
    mov :u16 1 -> :i64 %_40
    mov :u32 1 -> :i64 %_41

    comment "=========== float extend ==========="
    mov :f32 1 -> :f64 %_42

    comment "============== trunc ==============="
    mov :i16 1 -> :i8  %_43
    mov :i32 1 -> :i8  %_44
    mov :i64 1 -> :i8  %_45
    mov :i32 1 -> :i16 %_46
    mov :i64 1 -> :i16 %_47
    mov :i64 1 -> :i32 %_48

    mov :u16 1 -> :u8  %_49
    mov :u32 1 -> :u8  %_50
    mov :u64 1 -> :u8  %_51
    mov :u32 1 -> :u16 %_52
    mov :u64 1 -> :u16 %_53
    mov :u64 1 -> :u32 %_54

    mov :i16 1 -> :u8  %_55
    mov :i32 1 -> :u8  %_56
    mov :i64 1 -> :u8  %_57
    mov :i32 1 -> :u16 %_58
    mov :i64 1 -> :u16 %_59
    mov :i64 1 -> :u32 %_60

    mov :u16 1 -> :i8  %_61
    mov :u32 1 -> :i8  %_62
    mov :u64 1 -> :i8  %_63
    mov :u32 1 -> :i16 %_64
    mov :u64 1 -> :i16 %_65
    mov :u64 1 -> :i32 %_66

    comment "=========== float trunc ============"
    mov :f64 1 -> :f32 %_67

    comment "=========== float to int ==========="
    mov :f32 1 -> :i8  %_68
    mov :f32 1 -> :i16 %_69
    mov :f32 1 -> :i32 %_70
    mov :f32 1 -> :i64 %_71
    mov :f64 1 -> :i8  %_72
    mov :f64 1 -> :i16 %_73
    mov :f64 1 -> :i32 %_74
    mov :f64 1 -> :i64 %_75

    comment "========== float to uint ==========="
    mov :f32 1 -> :u8  %_76
    mov :f32 1 -> :u16 %_77
    mov :f32 1 -> :u32 %_78
    mov :f32 1 -> :u64 %_79
    mov :f64 1 -> :u8  %_80
    mov :f64 1 -> :u16 %_81
    mov :f64 1 -> :u32 %_82
    mov :f64 1 -> :u64 %_83

    comment "========== int to float ============"
    mov :i8  1 -> :f32 %_84
    mov :i16 1 -> :f32 %_85
    mov :i32 1 -> :f32 %_86
    mov :i64 1 -> :f32 %_87
    mov :i8  1 -> :f64 %_88
    mov :i16 1 -> :f64 %_89
    mov :i32 1 -> :f64 %_90
    mov :i64 1 -> :f64 %_91

    comment "========== uint to float ==========="
    mov :u8  1 -> :f32 %_92
    mov :u16 1 -> :f32 %_93
    mov :u32 1 -> :f32 %_94
    mov :u64 1 -> :f32 %_95
    mov :u8  1 -> :f64 %_96
    mov :u16 1 -> :f64 %_97
    mov :u32 1 -> :f64 %_98
    mov :u64 1 -> :f64 %_99

    comment "============ arithmetic ============"
    add %x, 1          -> %_100
    sub %y, %x         -> %_101
    mul 3.14, 1        -> %_102
    div :f64 1.0, 3.14 -> %_103
    mod 1, 1           -> %_104

    comment "============== logic ==============="
    and 1, 1      -> %_105
    or  1, 1      -> %_106
    xor 1, 1      -> %_107
    lsh 1, 1      -> %_108
    rsh 1, 1      -> %_109
    lsh :u64 1, 1 -> %_110
    rsh :u64 1, 1 -> %_111

    comment "=========== comparisons ============"
    cmp eq 1, 1 -> %_112
    cmp ne 1, 1 -> %_113
    cmp lt 1, 1 -> %_114
    cmp le 1, 1 -> :i32 %_115
    cmp gt 1, 1 -> :i32 %_116
    cmp ge 1, 1 -> :i32 %_117

    comment "============== memory =============="
    alloc :i32 -> :i32 %_118
    store 1    -> x
    load  x    -> :i32 %_119

    comment "=============== call ==============="
    call :i64 printf, ("%zi\n", ..., 42) -> :i32 %_120

    comment "=============== ret ================"
    ret 42

}

proc bar() :f64 {
    ret :f64 3.14
}

local const one 0x1000
pub data two :i32 42
data three :i64
const four :f64 3.14
const five :f32 0x3f800000
const six "a string"

local proc _entry() {
    ret
}

/* @retcode
0
@endretcode */
