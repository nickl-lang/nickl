#ifndef X
#define X(...)
#endif

// type, id

X(null, any)
X(null, bool)
X(null, break)
X(null, continue)
X(null, f32)
X(null, f64)
X(null, false)
X(null, i16)
X(null, i32)
X(null, i64)
X(null, i8)
X(null, nop)
X(null, string)
X(null, symbol)
X(null, true)
X(null, typeref)
X(null, u16)
X(null, u32)
X(null, u64)
X(null, u8)
X(null, void)

X(unary, addr)
X(unary, alignof)
X(unary, assert)
X(unary, compl )
X(unary, const)
X(unary, dec)
X(unary, deref)
X(unary, dynarray_type)
X(unary, inc)
X(unary, not )
X(unary, pdec)
X(unary, pinc)
X(unary, return )
X(unary, sizeof)
X(unary, typeof)
X(unary, uminus)
X(unary, uplus)

X(binary, add)
X(binary, add_assign)
X(binary, and)
X(binary, and_assign)
X(binary, array_type)
X(binary, assign)
X(binary, bitand)
X(binary, bitand_assign)
X(binary, bitor)
X(binary, bitor_assign)
X(binary, cast)
X(binary, colon_assign)
X(binary, div)
X(binary, div_assign)
X(binary, eq)
X(binary, ge)
X(binary, gt)
X(binary, index)
X(binary, le)
X(binary, lsh)
X(binary, lsh_assign)
X(binary, lt)
X(binary, mod)
X(binary, mod_assign)
X(binary, mul)
X(binary, mul_assign)
X(binary, ne)
X(binary, or)
X(binary, or_assign)
X(binary, rsh)
X(binary, rsh_assign)
X(binary, sub)
X(binary, sub_assign)
X(binary, while)
X(binary, xor)
X(binary, xor_assign)

X(ternary, if)
X(ternary, ternary)

X(array, array)
X(array, block)
X(array, tuple)
X(array, tuple_type)

X(id, id)
X(id, sym)

X(member, member)
X(member, offsetof)

X(numeric, numeric_f32)
X(numeric, numeric_f64)
X(numeric, numeric_i16)
X(numeric, numeric_i32)
X(numeric, numeric_i64)
X(numeric, numeric_i8)
X(numeric, numeric_u16)
X(numeric, numeric_u32)
X(numeric, numeric_u64)
X(numeric, numeric_u8)

X(type_decl, struct)
X(type_decl, union)

X(call, call)
X(closure, closure)
X(closure_type, closure_type)
X(fn, fn)
X(fn_type, fn_type)
X(str, string_literal)
X(struct_literal, struct_literal)
X(var_decl, var_decl)

#undef X
