import libc;
import json;
import compiler;

makeStruct :: (filename: string) -> type_t {
    root := json.object_from_file(filename.data);

    if root {
        FIELD_COUNT :: u64{10};
        field_ar: [FIELD_COUNT]compiler.StructField;

        fields := json.object_object_get(root, "fields");
        len := json.object_array_length(fields);

        if len > FIELD_COUNT {
            return struct {};
        }

        i: u64 = 0;
        while i < len {
            field := json.object_array_get_idx(fields, i);

            type_cstr := json.object_get_string(json.object_object_get(field, "type"));
            name_cstr := json.object_get_string(json.object_object_get(field, "name"));

            field_ar[i].name.data = name_cstr;
            field_ar[i].name.size = libc.strlen(name_cstr);
            field_ar[i].type = compiler.basicTypeFromString(type_cstr);

            i = i + 1;
        }

        // TODO Manual array slicing
        type := compiler.makeStruct(([]compiler.StructField){&field_ar, len});
        json.object_put(root);
        return type;
    }

    return struct {};
}

main :: (argc: i32, argv: **i8) -> i32 {
    obj: makeStruct("./struct.json");
    obj.x = 1.23;
    obj.y = 4.56;

    libc.printf("x=%g y=%g\n", obj.x, obj.y);

    return 0;
}

builder := compiler.createBuilder();
compiler.build(builder, main, "struct_from_json");
compiler.freeBuilder(builder);
