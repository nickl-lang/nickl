c :: import libc;

Nothing :: u64{0}; // TODO Hardcoded Nothing index

MaybeInt :: enum {
    Nothing,
    Just: i32,
}

MaybeStr :: enum {
    Nothing,
    Just: string,
}

bind :: (self: *const MaybeInt, f: (x: i32) -> MaybeStr) -> MaybeStr {
    if self.tag == Nothing {
        return MaybeStr{Nothing=void{}}; // TODO void literal
    } else {
        return f(self.data.Just);
    }
}

random :: () -> i32 {
    //ts: c.timespec;
    //c.clock_gettime(c.CLOCK_MONOTONIC, &ts);
    //c.srand(cast(u32) ts.tv_nsec);
    //return c.rand();
    return 4; // Chosen by a fair dice roll
}

maybeGetInt :: () -> MaybeInt {
    if random() % 2 {
        return MaybeInt{Nothing=void{}};
    } else {
        return MaybeInt{Just=42};
    }
}

BUF_SIZE :: u64{100};
s_buf: [BUF_SIZE]i8;

main :: (argc: i32, argv: **i8) -> i32 {
    maybe_str := bind(&maybeGetInt(), (x: i32) -> MaybeStr { // TODO Manual address
        c.snprintf(&s_buf, BUF_SIZE, "%i", x);
        return MaybeStr{Just=string{&s_buf, c.strlen(&s_buf)}}; // TODO Manual slice construction
    });
    if maybe_str.tag == Nothing {
        c.puts("(nothing)");
    } else {
        str := maybe_str.data.Just;
        c.printf("str=`%.*s`\n", str.size, str.data);
    }

    return 0;
}

main(0, cast(**i8) u64{0});

import compiler;
builder := compiler.createBuilder();
compiler.build(builder, main, "monad");
compiler.freeBuilder(builder);
