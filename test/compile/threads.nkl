import libc;

pthread_t :: u64;
pthread_attr_t :: u64;

// TODO Add #extern("c") to ThreadFunc type
ThreadFunc :: (arg: *void) -> *void;

LIBPTHREAD :: "libpthread.so.0";

#link(LIBPTHREAD) pthread_create :: (
    thread: *pthread_t,
    attr: *const pthread_attr_t,
    start_routine: ThreadFunc,
    arg: *void) -> i32;
#link(LIBPTHREAD) pthread_join :: (thread: pthread_t, retval: **void) -> i32;
#link(LIBPTHREAD) pthread_self :: () -> pthread_t;

#extern("c") thread :: (arg: *void) -> *i8 {
    libc.printf("thread: arg='%s'\n", arg);
    libc.printf("thread: id=%li\n", pthread_self());
    return "hello";
}

exec :: (name: *i8) -> void {
    thread_id: pthread_t;
    ret: *i8;

    if pthread_create(&thread_id,
           cast(*pthread_attr_t) u64{0},
           cast(ThreadFunc) thread,
           cast(*void) name) != 0 {
        libc.printf("error: pthread_create() error");
        return;
    }

    if pthread_join(thread_id, cast(**void) &ret) != 0 {
        libc.printf("error: pthread_join() error");
        return;
    }

    libc.printf("exec: ret='%s'\n", ret);
}

main :: () -> i32 {
    ${ exec("Compile time threads!"); }
    exec("Run time threads!");

    return 0;
}

c :: import compiler;
builder := c.createBuilder();
c.link(builder, LIBPTHREAD);
c.build(builder, cast(c.EntryPoint) main, "threads");
c.freeBuilder(builder);
