import std;

pthread_t :: u64;
pthread_attr_t :: u64;

// TODO Add #extern("c") to ThreadFunc type
ThreadFunc :: (arg: *void) -> *void;

#foreign("libpthread.so") pthread_create :: (
    thread: *pthread_t,
    attr: *const pthread_attr_t,
    start_routine: ThreadFunc,
    arg: *void) -> i32;
#foreign("libpthread.so") pthread_join ::(thread: pthread_t, retval: **void) -> i32;
#foreign("libpthread.so") pthread_self :: () -> pthread_t;

#extern("c") thread :: (arg: *void) -> *void {
    std.printf("thread: arg='%s'\n", arg);
    std.printf("thread: id=%li\n", pthread_self());
    return "hello";
}

main :: () -> i32 {
    thread_id: pthread_t;
    ret: *u8;

    if pthread_create(&thread_id, 0, thread, "arg") != 0 {
        std.printf("error: pthread_create() error");
        return 1;
    }

    if pthread_join(thread_id, &ret) != 0 {
        std.printf("error: pthread_create() error");
        return 1;
    }

    std.printf("main: ret='%s'\n", ret);

    return 0;
}

import compiler;
builder := compiler.createBuilder();
compiler.link(builder, "libpthread.so");
compiler.build(builder, main, "threads");
compiler.freeBuilder(builder);
