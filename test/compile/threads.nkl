c  :: import libc;
pt :: import pthread;

#extern("c") thread :: (arg: *void) -> *void {
    c.printf("thread: arg='%s'\n", arg);
    c.printf("thread: id=%li\n", pt.self());
    return cast(*void) "hello";
}

exec :: (name: string) -> void {
    thread_id: pt.pthread_t;
    ret: *i8;

    if pt.create(&thread_id, null, thread, cast(*void) name.data) != 0 {
        c.puts("error: pthread_create() error");
        return;
    }

    if pt.join(thread_id, cast(**void) &ret) != 0 {
        c.puts("error: pthread_join() error");
        return;
    }

    c.printf("main: ret='%s'\n", ret);
}

main :: (argc: i32, argv: **i8) -> i32 {
    ${ exec("Compile time threads!"); }
    exec("Run time threads!");

    return 0;
}

import compiler;
builder := compiler.createBuilder();
compiler.link(builder, pt.LIBPTHREAD);
compiler.build(builder, main, "threads");
compiler.freeBuilder(builder);
