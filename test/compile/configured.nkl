import libc;

main :: (argc: i32, argv: **i8) -> i32 {
    libc.puts("main");

    ITERATION_COUNT :: () -> i64 {
        CONFIG_FILENAME :: "config.txt";

        libc.puts("reading config");

        file := libc.fopen(CONFIG_FILENAME, "r");

        if 0 == file {
            libc.printf("error: failed to read config file `%s`\n", CONFIG_FILENAME);
            return 0;
        }

        BUF_SIZE :: u64{64};
        buf: [BUF_SIZE+1]i8;
        bytes_read := libc.fread(&buf, u64{1}, BUF_SIZE, file);
        if BUF_SIZE == bytes_read {
            libc.puts("error: not enough memory in buffer");
            return 0;
        }
        val := cast(i64) libc.atoi(&buf);

        libc.fclose(file);

        return val;
    }();

    i := 0;
    while i < ITERATION_COUNT {
        libc.printf("i=%li\n", i);
        i = i + 1;
    }

    return i32{0};
}

import compiler;
builder := compiler.createBuilder();
compiler.build(builder, cast(compiler.EntryPoint) main, "configured");
compiler.freeBuilder(builder);
