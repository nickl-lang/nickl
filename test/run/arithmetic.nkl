import std;

// TODO Implement assert

fabs :: (x: f64) -> f64 { if x < 0. return -x; else return x; }

std.printf("%hhi", ~5 == -6);
std.printf("%hhi", ~1 == -2);
std.printf("%hhi", -1 == 0 - 1);
std.printf("%hhi", +1 == 0 + 1);

std.printf("%hhi", 2 + 2 == 4);
std.printf("%hhi", 3 - 4 == -1);
std.printf("%hhi", 3 * 4 == 12);
std.printf("%hhi", 4 / 2 == 2);
std.printf("%hhi", 1 / 2 == 0);
std.printf("%hhi", fabs(1. / 2. - 0.5) < 1e-6);
std.printf("%hhi", 5 % 2 == 1);

std.printf("%hhi", 1 << 10 == 1024);
std.printf("%hhi", 256 >> 2 == 64);

std.printf("%hhi", (3 & 2) == 2);
std.printf("%hhi", (1 | 2) == 3);
std.printf("%hhi", (3 ^ 2) == 1);

std.printf("%hhi", bool != i8);

// TODO(typeof) std.printf("%hhi", @typeof(true) == bool);
// TODO(typeof) std.printf("%hhi", @typeof(false) == bool);

std.printf("%hhi", (cast(i8) true & cast(i8) false) == 0);
std.printf("%hhi", (cast(i8) true & cast(i8) true) == 1);

// TODO(typeof) std.printf("%hhi", @typeof(!1) == bool);
std.printf("%hhi", !cast(bool) 1 == false);
std.printf("%hhi", !cast(bool) 0 == true);

std.printf("%hhi", cast(bool) 0 != true);
std.printf("%hhi", !(cast(bool) 1 != true));

std.printf("%hhi", (1 || 0) == true);
std.printf("%hhi", (1 && 0) == false);

a := false;
toggle :: () -> void { a = !a; }
false && toggle();
true || toggle();
std.printf("%hhi", !a);

std.puts("");
