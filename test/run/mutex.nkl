c  :: import libc;
pt :: import pthread;

Context :: struct {
    counter: *u64,
    mtx: *pt.pthread_mutex_t,
    num_iter: u64,
}

#extern("c") thread :: (arg: *void) -> *void {
    if arg == 0 return;
    ctx := cast(*Context) arg;
    i := 0;
    while i < ctx.num_iter {
        pt.mutex_lock(ctx.mtx);
        ctx.counter.* = ctx.counter.* + 1;
        pt.mutex_unlock(ctx.mtx);
        i = i + 1;
    }
    return null;
}

main :: (argc: i32, argv: **i8) -> i32 {
    counter: u64;
    mtx: pt.pthread_mutex_t;

    pt.mutex_init(&mtx, null);

    thread_id_1: pt.pthread_t;
    thread_id_2: pt.pthread_t;

    arg_1 := Context{&counter, &mtx, 10110};
    arg_2 := Context{&counter, &mtx, 11001};

    pt.create(&thread_id_1, null, thread, cast(*void) &arg_1);
    pt.create(&thread_id_2, null, thread, cast(*void) &arg_2);

    pt.join(thread_id_1, null);
    pt.join(thread_id_2, null);

    pt.mutex_destroy(&mtx);

    c.printf("%llu\n", counter);

    return 0;
}

thread(null); // TODO Need to translate early
main(0, null);

// import compiler;
// builder := compiler.createBuilder();
// compiler.link(builder, pt.LIBPTHREAD);
// compiler.build(builder, main, "mutex");
// compiler.freeBuilder(builder);
