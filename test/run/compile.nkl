import std;

main :: (argc: i32, argv: **i8) -> i32 {
    std.puts("main");

    ITERATION_COUNT :: () -> i64 {
        CONFIG_FILENAME :: "compile_test_config.txt";

        std.puts("reading config");

        file := std.fopen(CONFIG_FILENAME, "r");

        if 0 == file {
            std.printf("error: failed to read config file `%s`\n", CONFIG_FILENAME);
            return 0;
        }

        BUF_SIZE :: 64;
        buf: [BUF_SIZE+1]i8;
        bytes_read := std.fread(&buf, 1, BUF_SIZE, file);
        if BUF_SIZE == bytes_read {
            std.puts("error: not enough memory in buffer");
            return 0;
        }
        val := std.atoi(&buf);

        std.fclose(file);

        return val;
    }();

    i := 0;
    while i < ITERATION_COUNT {
        std.printf("i=%li\n", i);
        i = i + 1;
    }

    return 0;
}

import compiler;
compiler.buildExecutable(main, "./compiler_out/", "compile_test");
