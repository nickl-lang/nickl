rl :: import raylib;

WHITE :: rl.Color{255, 255, 255, 255};
BLACK :: rl.Color{  0,   0,   0, 255};

drawCircle :: (cx: i32, cy: i32, r: i32) -> void {
    r2 := r + r;

    x := r;
    y := i32{0};
    dy := - i32{2};
    dx := r2 + r2 + 4;
    d := r2 - 1;

    while y <= x {
        rl.DrawPixel(cx - x, cy - y, BLACK);
        rl.DrawPixel(cx + x, cy - y, BLACK);
        rl.DrawPixel(cx - x, cy + y, BLACK);
        rl.DrawPixel(cx + x, cy + y, BLACK);
        rl.DrawPixel(cx - y, cy - x, BLACK);
        rl.DrawPixel(cx + y, cy - x, BLACK);
        rl.DrawPixel(cx - y, cy + x, BLACK);
        rl.DrawPixel(cx + y, cy + x, BLACK);

        d = d + dy;
        dy = dy - 4;
        y = y + 1;

        //if d < 0 {
        //    d = d + dx;
        //    dx = dx - 4;
        //    x = x - 1;
        //}

        mask := d >> 31;
        d = d + (dx & mask); // TODO + & precedence
        dx = dx - (4 & mask);
        x = x + mask;
    }
}

main :: (argc: i32, argv: **i8) -> i32 {
    SCREEN_WIDTH  :: i32{800};
    SCREEN_HEIGHT :: i32{450};

    rl.InitWindow(SCREEN_WIDTH, SCREEN_HEIGHT, "circle");
    rl.SetWindowState(rl.FLAG_WINDOW_RESIZABLE);

    rl.SetTargetFPS(60);

    radius := 150.0;

    while 0 == rl.WindowShouldClose() {
        wheel := rl.GetMouseWheelMove();
        if (wheel > 0) {
            radius = radius * 1.1;
        } else if (wheel < 0) {
            radius = radius / 1.1;
        }

        if (radius <= 1) {
            radius = 1;
        }

        rl.BeginDrawing();
            rl.ClearBackground(WHITE);
            drawCircle(rl.GetScreenWidth() / 2, rl.GetScreenHeight() / 2, cast(i32) radius);
            rl.DrawFPS(10, 10);
        rl.EndDrawing();
    }

    rl.CloseWindow();
}

//main(0, null);

import compiler;
builder := compiler.createBuilder();
compiler.link(builder, "../raylib/build/raylib/libraylib.so");
compiler.build(builder, main, "circle");
compiler.freeBuilder(builder);
