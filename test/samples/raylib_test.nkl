runRaylib :: () -> i64 {
    rl :: import raylib;

    SCREEN_WIDTH  :: i32{800};
    SCREEN_HEIGHT :: i32{450};

    rl.InitWindow(SCREEN_WIDTH, SCREEN_HEIGHT, "raylib");
    rl.SetWindowState(rl.FLAG_WINDOW_RESIZABLE);

    x := SCREEN_WIDTH / i32{2};
    y := SCREEN_HEIGHT / i32{2};
    dist := 0;

    rl.SetTargetFPS(i32{60});

    while 0 == rl.WindowShouldClose() {
        STEP :: 10;

        if rl.IsKeyDown(rl.KEY_RIGHT) { x = x + STEP; dist = dist + STEP; }
        if rl.IsKeyDown(rl.KEY_LEFT)  { x = x - STEP; dist = dist + STEP; }
        if rl.IsKeyDown(rl.KEY_UP)    { y = y - STEP; dist = dist + STEP; }
        if rl.IsKeyDown(rl.KEY_DOWN)  { y = y + STEP; dist = dist + STEP; }

        WHITE    :: rl.Color{u8{255}, u8{255}, u8{255}, u8{255}};
        MAROON   :: rl.Color{u8{190}, u8{30},  u8{55},  u8{255}};
        DARKGRAY :: rl.Color{u8{80},  u8{80},  u8{80},  u8{255}};

        RADIUS :: f32{50};

        rl.BeginDrawing();
            rl.ClearBackground(WHITE);
            rl.DrawCircle(x, y, RADIUS, MAROON);
            rl.DrawFPS(i32{10}, i32{10});
            rl.DrawText("move the ball with arrow keys", i32{10}, i32{30}, i32{20}, DARKGRAY);
            rl.DrawText(rl.TextFormat("distance traveled: %i pix", dist), i32{10}, i32{50}, i32{20}, DARKGRAY);
        rl.EndDrawing();
    }

    rl.CloseWindow();

    return dist;
}

main :: (argc: i32, argv: **i8) -> i32 {
    //runRaylib();
    import libc;
    libc.printf("distance traveled: %i pix\n", ${ runRaylib(); });
}

import compiler;
builder := compiler.createBuilder();
//compiler.link(builder, "../raylib/build/raylib/libraylib.so");
compiler.build(builder, cast(compiler.EntryPoint) main, "raylib_test");
compiler.freeBuilder(builder);
