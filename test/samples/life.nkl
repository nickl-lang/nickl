c :: import libc;

FPS :: 30;

ROWS :: 30;
COLS :: 60;

NS_IN_S :: 1000000000;
FRAMETIME_NS :: NS_IN_S / FPS;

s_field: [2][cast(u64) (ROWS * COLS)]bool;

s_cur_buf := u64{0};

s_cursor_x := 0;
s_cursor_y := 0;

s_quit := false;

pmod :: (x: i64, n: i64) -> i64 {
    return (x % n + n) % n;
}

nextBuf :: () -> u64 {
    return (s_cur_buf + 1) % 2;
}

swapBufs :: () -> void {
    s_cur_buf = nextBuf();
}

atBuf :: (x: i64, y: i64, buf: u64) -> *bool {
    return &s_field[buf][cast(u64) (pmod(y, COLS) * ROWS + pmod(x, ROWS))];
}

at :: (x: i64, y: i64) -> *bool {
    return atBuf(x, y, s_cur_buf);
}

nextAt :: (x: i64, y: i64) -> *bool {
    return atBuf(x, y, nextBuf());
}

get :: (x: i64, y: i64) -> bool {
    return at(x, y).*;
}

set :: (x: i64, y: i64, v: bool) -> void {
    at(x, y).* = v;
}

setNext :: (x: i64, y: i64, v: bool) -> void {
    nextAt(x, y).* = v;
}

getTimestamp :: () -> i64 {
    ts: c.timespec;
    c.clock_gettime(c.CLOCK_MONOTONIC, &ts);
    return ts.tv_sec * NS_IN_S + ts.tv_nsec;
}

step :: () -> void {
    x := 0; while x < ROWS {
        y := 0; while y < COLS {
            sum := u64{0};
            dx := -1; while dx <= 1 {
                dy := -1; while dy <= 1 {
                    sum = sum + get(x + dx, y + dy);
                    dy = dy + 1;
                }
                dx = dx + 1;
            }
            if get(x, y) setNext(x, y, sum-1 >= 2 && sum-1 <= 3);
            else setNext(x, y, sum == 3);
            y = y + 1;
        }
        x = x + 1;
    }
    swapBufs();
}

randomize :: () -> void {
    x := 0; while x < ROWS {
        y := 0; while y < COLS {
            set(x, y, cast(bool) (c.rand() % 2));
            y = y + 1;
        }
        x = x + 1;
    }
}

// TODO Cannot do char literals
ESC :: i32{27};

main :: () -> i32 {
    ts: c.timespec;
    c.clock_gettime(c.CLOCK_MONOTONIC, &ts);
    c.srand(cast(u32) ts.tv_nsec);

    c.system("stty -icanon -echo");

    fl := c.fcntl(c.STDIN_FILENO, c.F_GETFL, 0);
    c.fcntl(c.STDIN_FILENO, c.F_SETFL, fl | c.O_NONBLOCK);

    c.putchar(ESC); c.printf("[?25l");

    empty_row: [cast(u64) COLS]bool;
    c.memset(cast(*void) &empty_row, cast(i32) "."[0], cast(u64) COLS);

    running := false;

    prev_ts := getTimestamp();

    while s_quit != true {
        ch: i8;

        ch = cast(i8) c.getchar();

        if      ch ==  "q"[0] s_quit = true;
        else if ch ==  "w"[0] s_cursor_x = pmod(s_cursor_x - 1, ROWS);
        else if ch ==  "a"[0] s_cursor_y = pmod(s_cursor_y - 1, COLS);
        else if ch ==  "s"[0] s_cursor_x = pmod(s_cursor_x + 1, ROWS);
        else if ch ==  "d"[0] s_cursor_y = pmod(s_cursor_y + 1, COLS);
        else if ch ==  " "[0] set(s_cursor_x, s_cursor_y, !get(s_cursor_x, s_cursor_y));
        else if ch == "\n"[0] running = running ^ 1;
        else if ch ==  "c"[0] c.memset(cast(*void) at(0, 0), 0, cast(u64) (ROWS * COLS));
        else if ch ==  "e"[0] step();
        else if ch ==  "r"[0] randomize();

        if running {
            step();
        }

        x := 0; while x < ROWS {
            y := 0; while y < COLS {
                if running == false && x == s_cursor_x && y == s_cursor_y {
                    c.putchar(ESC); c.printf("[30m");
                    c.putchar(ESC); c.printf("[47m");
                }
                if get(x, y) c.printf("#"); else c.printf(".");
                if running == false && x == s_cursor_x && y == s_cursor_y {
                    c.putchar(ESC); c.printf("[49m");
                    c.putchar(ESC); c.printf("[39m");
                }
                y = y + 1;
            }
            c.putchar(cast(i32) "\n"[0]);
            x = x + 1;
        }

        c.putchar(ESC); c.printf("[0G", ROWS);
        c.putchar(ESC); c.printf("[%iA", ROWS);

        ts := getTimestamp();
        elapsed_ns := ts - prev_ts;

        if elapsed_ns < FRAMETIME_NS {
            c.nanosleep(&c.timespec{0, FRAMETIME_NS - elapsed_ns}, cast(*c.timespec) u64{0});
        }

        prev_ts = ts;
    }

    c.putchar(ESC); c.printf("[?25h");

    c.fcntl(c.STDIN_FILENO, c.F_SETFL, fl);

    c.system("stty icanon echo");

    return 0;
}

import compiler;
builder := compiler.createBuilder();
compiler.build(builder, cast(compiler.EntryPoint) main, "life");
compiler.freeBuilder(builder);
