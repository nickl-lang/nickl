Builder :: void;
EntryPoint :: (argc: i32, argv: **i8) -> i32;

#link("", "nkl_compiler_") createBuilder :: () -> *Builder;
#link("", "nkl_compiler_") freeBuilder :: (b: *Builder) -> void;

#link("", "nkl_compiler_") link :: (b: *Builder, lib: []i8) -> void;
#link("", "nkl_compiler_") build :: (b: *Builder, entry: EntryPoint, exe_name: []i8) -> bool;

#link("", "nkl_compiler_") declareLocal :: (name: []i8, type: type_t) -> void;

StructField :: struct {
    name: []i8,
    type: type_t,
}

#link("", "nkl_compiler_") makeStruct :: (fields: []StructField) -> type_t;

basicTypeFromString :: (str: *i8) -> type_t {
    import std;
    if 0 == std.strcmp("i8",  str) return i8;
    if 0 == std.strcmp("i16", str) return i16;
    if 0 == std.strcmp("i32", str) return i32;
    if 0 == std.strcmp("i64", str) return i64;
    if 0 == std.strcmp("u8",  str) return u8;
    if 0 == std.strcmp("u16", str) return u16;
    if 0 == std.strcmp("u32", str) return u32;
    if 0 == std.strcmp("u64", str) return u64;
    if 0 == std.strcmp("f32", str) return f32;
    if 0 == std.strcmp("f64", str) return f64;
    return void;
}
